@charset "utf-8";
//-------------------------------------------
// ベース
//-------------------------------------------

// Base
// 
// ・汎用性を強くもったテンプレートをまとめたもの。<br>
// ・**Modifierが多くなりそう**、**細かい調整が必要になりそう**な場合は、<br>
// ・専用モジュールを作成するためのベースとして使用する<br>
// 
// Styleguide: 3.0

// Grid Neat
//
// Neatを元にしたグリッド型モジュールのベース
// 
// - 高さは自動揃いしない
// - nth-childが効かないブラウザを考慮するならば高さを揃えor固定する（nth-でclearしているため、clearが効かずに高さが異なると崩れる）
// - 自動でマージンが約1emが付与されるので、余白なしや細かい調整が必要なものは別モジュールを
// - borderやbackgroundなどのスタイルは子要素の子要素に付与する
// - あまりModifierでレイアウトは変えないと思うので、とりあえずそのまま
// - レスポンシブ対応
//
// Markup:
// <div class="m-grid-1">
//   <div class="m-grid-1__inner">
//     <div style="background: #ccc;">テキストテキスト<br>テキストテキストテキスト</div>
//   </div>
//   <div class="m-grid-1__inner">
//     <div style="background: #ccc;">テキストテキストテキストテキストテキスト</div>
//   </div>
//   <div class="m-grid-1__inner">
//      <div style="background: #ccc;">テキストテキストテキストテキストテキスト</div>
//   </div>
//   <div class="m-grid-1__inner">
//      <div style="background: #ccc;">テキストテキストテキスト<br>テキストテキスト</div>
//   </div>
//   <div class="m-grid-1__inner">
//     <div style="background: #ccc;">テキストテキストテキストテキストテキスト</div>
//   </div>
//   <div class="m-grid-1__inner">
//     <div style="background: #ccc;">テキストテキストテキストテキストテキスト</div>
//   </div>
// </div>
// 
// Styleguide: 3.1

// http://neat.bourbon.io/examples/ を参考に作成する

// メディアクエリを使う場合はomegaを打ち消す必要があるため、このmixinを使用する
@mixin omega-reset($nth) {
	&:nth-child(#{$nth}) { margin-right: flex-gutter(); }
	&:nth-child(#{$nth}+1) { clear: none }
}

.m-grid-1 {
	$col_pc: 2;
	$col_sp: 4;

	@include outer-container(100%);

	@at-root .m-grid-1__inner {
		margin-bottom: 2.35765%;
		@include span-columns(12/$col_pc);
		@include omega(#{$col_pc}n);
		// media
		@include mQuery_sp {
			@include omega-reset(#{$col_pc}n);
			@include span-columns(12/$col_sp);
			@include omega(#{$col_sp}n);
		}
	}
}



// Grid Adjust
//
// 独自のグリッド型モジュールのベース
// 
// - 余白を柔軟に設定できる
// - 高さは自動揃いしない
// - nth-childが効かないブラウザを考慮するならば高さを揃えor固定すること
// - Grid neatと比べて1つネストが深いのに注意
// - borderやbackgroundなどのスタイルは子要素の子要素に付与する
// - レイアウトはあまり変えないとおもうので、Modifierは余白のみを引数で設定する
// - レスポンシブ対応
//
// .has-gutter0 - サンプル
// .has-gutter10 - サンプル  初期値
// .has-gutter20 - サンプル
// .has-gutter30 - サンプル
// .has-gutter40 - サンプル
//
// Markup:
// <div class="m-grid-2 {{[modifier_class]}}">
//   <div class="m-grid-2__outer">
//     <div class="m-grid-2__inner">
//       <div style="background: #ccc;">テキストテキストテキスト</div>
//     </div>
//     <div class="m-grid-2__inner">
//       <div style="background: #ccc;">テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</div>
//     </div>
//     <div class="m-grid-2__inner">
//        <div style="background: #ccc;">テキストテキストテキストテキストテキスト</div>
//     </div>
//     <div class="m-grid-2__inner ">
//        <div style="background: #ccc;">テキストテキストテキスト<br>テキストテキスト</div>
//     </div>
//     <div class="m-grid-2__inner ">
//       <div style="background: #ccc;">テキストテキストテキストテキストテキスト</div>
//     </div>
//     <div class="m-grid-2__inner ">
//       <div style="background: #ccc;">テキストテキストテキストテキストテキスト</div>
//     </div>
//   </div>
// </div>
// 
// Styleguide: 3.2

@mixin baseGrid-org(
	$col_pc: 2, // PCのカラム数
	$col_sp: 1, // スマホのカラム数
	$gutter: 10px, // 初期の余白
	$modifiers: null // Modifiersのクラスと余白の連想配列
) {

	// 初期設定
	overflow: hidden;
	&__outer {
		@include clearfix;
		margin: 0 -#{$gutter} 0 0;
	}
	&__inner {
		box-sizing: border-box;
		display: block;
		float: left;
		padding: 0;
		width: percentage(1/$col_pc);
		padding-right: $gutter;
		padding-bottom: $gutter;
		&:nth-child(#{$col_pc}n + 1) {
			clear: left;
		}

		// media
		@include mQuery_sp {
			width: percentage(1/$col_sp);
			&:nth-child(#{$col_sp}n + 1) {
				clear: left;
			}
		}
	}

	// modifier
	$that: &;
	@each $class, $val in $modifiers {
		&#{$class} {
			#{$that}__outer {
				margin-right: -$val;
			}
			#{$that}__inner {
				padding-right: $val;
				padding-bottom:  $val;
			}
		}
	}
}

.m-grid-2 {
	$col_pc: 3;
	$col_sp: 1;
	$gutter: 10px;
	$modifiers: (
		'.has-gutter0': 0px,
		'.has-gutter10': 10px,
		'.has-gutter20': 20px,
		'.has-gutter30': 30px,
		'.has-gutter40': 40px
	);
	@include baseGrid-org($col_pc, $col_sp, $gutter, $modifiers);
}



// Card flex
// 
// flexboxを元にしたカード型モジュールのベース
//
// - flexを使用しているので、対応ブラウザに注意する
// - neatはprefixのために使用している
// - 細かいところは要調整
//
// .is-2width - カードの横幅を2倍に
// .is-3width - カードの横幅を3倍に
//
// Markup:
// <div class="m-card">
//   <div class="m-card__inner {{[modifier_class]}}">
//     <div style="background: #ccc;">テキスト<br>テキスト<br>テキスト</div>
//   </div>
//   <div class="m-card__inner">
//     <div style="background: #ccc;">テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</div>
//   </div>
//   <div class="m-card__inner">
//     <div style="background: #ccc;">テキスト</div>
//   </div>
//   <div class="m-card__inner">
//     <div style="background: #ccc;">テキスト<br>テキスト<br>テキスト</div>
//   </div>
// </div>
//
// Styleguide: 3.3
@mixin baseCard-neat(
		// カラムの横幅（カラム数に影響）
		$colWidth: 29%,
		// 余白
		$margin: 2%,
		// 大きくするModifierのclass名
		$big2_div: null,
		$big3_div: null
	) {
	@include display(flex);
	@include flex-wrap(wrap);
	@include justify-content(space-between);
	&__inner {
		@include flex-basis($colWidth);
		@include flex-grow(1);
		margin: 0 #{$margin} #{$margin};

		// Cardを大きくする
		@if ($big2_div != null) {
			&#{$big2_div} {
				@include flex-basis($colWidth * 2);
			}
		}
		@if ($big3_div != null) {
			&#{$big3_div} {
				@include flex-basis($colWidth * 3);
			}
		}
	}
}
.m-card {
	@include baseCard-neat(
		$colWidth: 29%,
		$margin: 2%,
		$big2_div: '.is-2width',
		$big3_div: '.is-3width'
	);
}


// Media
// 
// 画像などの組み合わせモジュール
//
// - 条件が多くなりがちなので、これをベースにモジュールを作成することを前提
// - Modifierは左右の位置のみ
// - 余白の調整と回りこみの調整はモジュール単位で行う
//
// .is-right - サンプル
//
// Markup:
// <div class="m-side-media {{[modifier_class]}}">
//   <div class="m-side-media__img">
//     <img src="http://placehold.jp/150x150.png" alt="" />
//   </div>
//   <p class="m-side-media__text">テキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト<br>テキストテキスト</p>
// </div>
//
// Styleguide: 3.4
@mixin sideMedia(
		// 余白
		$margin: 30px,
		// メディアの下に回り込ませるかどうか（）
		$isSneak: false
	){

	@include clearfix;
	&__img {
		float: left;
		margin-right: $margin;
		@if ($isSneak) {
			margin-bottom: $margin;
		}
		> * {
			display: block;
		}
	}
	// テキスト側
	&__text {
		@if ($isSneak) {
			overflow: visible;
		} @else {
			overflow: hidden;
		}
	}

	// Modifier
	$that: &;
	&.is-right {
		#{$that}__img {
			float: right;
			margin-left: $margin;
			margin-right: 0;
		}
	}
}

.m-side-media {
	@include sideMedia();
	// 回り込み、余白の調整はModifierでなくモジュール単位で変更する
}


