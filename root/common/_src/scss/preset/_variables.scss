@charset "utf-8";
/////////////////////////////////////////////
// グローバル変数・関数を管理します
/////////////////////////////////////////////


//-------------------------------------------
// メディアクエリ
// 必要に応じて調整すること
// use:: @include mQuery_pc {}
//-------------------------------------------
$g_width-pc: 940px;
$g_width-tablet: 768px;
$g_width-smartphone: 480px;
$g_width-scrollbar: 20px;

@mixin mQuery_pc {
	// PC表示: 768+20=788px～
	@media only screen and (min-width: $g_width-tablet + $g_width-scrollbar) {
		@content;
	}
}
@mixin mQuery_tablet {
	// タブレット表示: 480+20=500px ～ 768+20-1=787px
	@media only screen and (min-width: $g_width-smartphone + $g_width-scrollbar) and (max-width: $g_width-tablet + $g_width-scrollbar - 1) {
		@content;
	}
}
@mixin mQuery_sp {
	// スマートフォン表示: 480+20-1=499px～
	@media only screen and (max-width: $g_width-smartphone + $g_width-scrollbar - 1) {
		@content;
	}
}





//-------------------------------------------
// 色設計
//-------------------------------------------

// Colors
// 
// ・プロジェクトで使用する基本色<br>
// ・**共通モジュール・スタイルにも影響**する<br>
// ・変数名はscssファイルを参考<br>
// ・以下表示されるclass名はガイドのために用意したものなので実際には使用しない
//
// Styleguide: 1

// Colors
//
// Markup:
// <div class="sample-color-style main"></div>
// <div class="sample-color-style sub"></div>
// <div class="sample-color-style base"></div>
// <div class="sample-color-style accent"></div>
//
// Styleguide: 1.1
$g_mainColor  : #3498db;
$g_subColor   : #eaf9fb;
$g_baseColor  : #ff6685;
$g_accentColor: #ff9900;

.sample-color-style {
	display: inline-block;
	width: 50px;
	height: 50px;
	&.main {background-color: $g_mainColor;}
	&.sub {background-color: $g_subColor;}
	&.base {background-color: $g_baseColor;}
	&.accent {background-color: $g_accentColor;}
}

// Gray Colors
//
// Markup:
// <div class="sample-gray-color-style light"></div>
// <div class="sample-gray-color-style normal"></div>
// <div class="sample-gray-color-style dark"></div>
//
// Styleguide: 1.2
$g_grayLight : #f7f7f7;
$g_grayNormal: #ccc;
$g_grayDark  : #aaa;

.sample-gray-color-style {
	display: inline-block;
	width: 50px;
	height: 50px;
	&.light {background-color: $g_grayLight;}
	&.normal {background-color: $g_grayNormal;}
	&.dark {background-color: $g_grayDark;}
}



//-------------------------------------------
// アイコン
//-------------------------------------------

// Icon
// 
// ・font-awesomeをbackgroundで使用する<br>
// ・:beforeもしくは:afterでmixin()を呼び出す<br>
// <br>
// ```
// @include bgFontAwesome("f013", 0 0 0 0.2em);
// @param {str} // 使用する文字列からはエスケープ \ を除外する（後述）
// @param {margin} // marginを渡す
// ```
// <br>
// ・使えるアイコンはhttp://fontawesome.io/cheatsheet/ を参考（ただし最新のものは使えない可能性あり）<br>
// ・以下表示されるclass名はガイドのために用意したものなので実際には使用しない
//
// Styleguide: 2

// Font-awesome mixin
//
// [注意事項]
// - 文字列にエスケープが含まれているとsassのコンパイル時に文字化けしてしまう。
// - 表示上は問題ないが（chromeでのみ確認）、cssファイル上で文字化ける。
// - font-awesomeで定義されている変数にはエスケープが含まれているので変数名をそのまま使用はできない
// - そのためにエスケープを動的に追加するfunctionをかませる、および引数はからエスケープを外すことで対応とした
// - sassのバージョンによっては不要になるかも
//
// Markup:
// <div class="sample-icon-before-style">アイコン</div>
// <div class="sample-icon-after-style">アイコン</div>
//
// Styleguide: 2.1

@function unicode($str){
 @return unquote("\"")+unquote(str-insert($str, "\\", 1))+unquote("\"");
}
@mixin bgFontAwesome($content, $margin: 0 .2em 0 0) {
	font-family: FontAwesome;
	content: unicode($content);
	display: inline-block;
	font-style: normal;
	font-weight: normal;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	margin: $margin;
}
.sample-icon-before-style {
	&:before {
		@include bgFontAwesome("f013");
	}
}
.sample-icon-after-style {
	&:after {
		@include bgFontAwesome("f170", 0 0 0 0.2em);
	}
}


